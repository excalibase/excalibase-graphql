{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Excalibase GraphQL","text":"Automatic GraphQL API generation from PostgreSQL database schemas <p>Transform your PostgreSQL database into a powerful GraphQL API in minutes</p>"},{"location":"#overview","title":"Overview","text":"<p>Excalibase GraphQL is a Spring Boot application that automatically generates a complete GraphQL API from your existing PostgreSQL database. Simply point it at your database and get instant GraphQL queries and mutations with built-in pagination, filtering, and relationship resolution.</p> \ud83d\ude80 Zero Configuration <p>Auto-generates GraphQL schema from your database structure. No manual type definitions needed.</p> \ud83d\udd0d Advanced Filtering <p>Modern object-based filtering with 15+ operators. Supports complex nested conditions and type safety.</p> \u26a1 High Performance <p>Optimized for production with sub-1s response times and built-in N+1 query prevention.</p> \ud83d\udee1\ufe0f Security First <p>Comprehensive security testing with SQL injection prevention and input validation.</p> \ud83d\udcc8 Production Ready <p>Docker support, CI/CD integration, and extensive test coverage for enterprise deployment.</p> \ud83d\udd17 Relationship Magic <p>Foreign keys automatically become GraphQL relationships. Supports one-to-one, one-to-many, and many-to-many.</p>"},{"location":"#quick-start","title":"Quick Start","text":"\ud83d\udce6 Install <p>Get started with Docker in under 2 minutes.</p> <pre><code>git clone https://github.com/excalibase/excalibase-graphql.git\ncd excalibase-graphql\n</code></pre> \u2699\ufe0f Configure <p>Set your database connection details.</p> <pre><code>export DB_HOST=localhost\nexport DB_NAME=your_database\nexport DB_USERNAME=postgres\nexport DB_PASSWORD=your_password\n</code></pre> \ud83d\ude80 Launch <p>Start the GraphQL API server.</p> <pre><code>docker-compose up -d\n</code></pre> \ud83c\udfaf Query <p>Access your GraphQL endpoint.</p> <pre><code>http://localhost:10000/graphql\n</code></pre>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Java 21+ - Required for running the application</li> <li>PostgreSQL 15+ - Supported database version  </li> <li>Docker - Recommended for easy deployment</li> <li>Maven 3.8+ - For local development builds</li> </ul>"},{"location":"#option-2-local-development","title":"Option 2: Local Development","text":"<ol> <li> <p>Clone the repository: <pre><code>git clone https://github.com/excalibase/excalibase-graphql.git\ncd excalibase-graphql\n</code></pre></p> </li> <li> <p>Configure your database in <code>src/main/resources/application.yaml</code>:    <pre><code>spring:\n  datasource:\n    url: jdbc:postgresql://localhost:5432/your_database\n    username: your_username\n    password: your_password\n\napp:\n  allowed-schema: public  # Your database schema\n  database-type: postgres\n</code></pre></p> </li> <li> <p>Build and run: <pre><code>mvn clean compile\nmvn spring-boot:run\n</code></pre></p> </li> <li> <p>Access GraphQL endpoint: <pre><code>http://localhost:10000/graphql\n</code></pre></p> </li> </ol>"},{"location":"#example-usage","title":"Example Usage","text":"<p>Given this database schema:</p> <pre><code>CREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(255) UNIQUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE posts (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(200) NOT NULL,\n    content TEXT,\n    author_id INTEGER REFERENCES users(id)\n);\n</code></pre> <p>You can immediately query:</p> <pre><code># Get all users\n{\n  users {\n    id\n    name\n    email\n    created_at\n  }\n}\n\n# Get posts with authors (automatic relationship resolution)\n{\n  posts {\n    id\n    title\n    content\n    users {  # Foreign key relationship automatically resolved\n      name\n      email\n    }\n  }\n}\n\n# Filtered query with pagination\n{\n  users(\n    name_contains: \"john\"\n    limit: 10\n    orderBy: { created_at: DESC }\n  ) {\n    id\n    name\n    email\n  }\n}\n</code></pre> <p>And perform mutations:</p> <pre><code># Create a new user\nmutation {\n  createUsers(input: {\n    name: \"Alice Johnson\"\n    email: \"alice@example.com\"\n  }) {\n    id\n    name\n    email\n    created_at\n  }\n}\n\n# Update existing user\nmutation {\n  updateUsers(input: {\n    id: 1\n    name: \"Alice Smith\"\n  }) {\n    id\n    name\n    email\n  }\n}\n\n# Delete user\nmutation {\n  deleteUsers(id: 1)\n}\n</code></pre>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#currently-available","title":"\u2705 Currently Available\ud83c\udfaf Advanced Filtering\u26a1 High Performance\ud83d\udee1\ufe0f Security Tested\ud83d\udcca Performance Tested\ud83d\udd17 Smart Relationships\ud83d\udc33 Production Ready","text":"<p>Modern object-based filtering with 41+ tests and 15+ operators including string matching, numeric comparisons, and date ranges.</p> <p>Optimized for large datasets with sub-1s response times, N+1 query prevention, and intelligent batching.</p> <p>Comprehensive security testing with 13+ security tests covering SQL injection prevention and input validation.</p> <p>6+ performance tests ensuring scalability with 1000+ records and 20+ concurrent requests.</p> <p>Foreign keys automatically become GraphQL relationships with support for one-to-one, one-to-many, and many-to-many patterns.</p> <p>Docker support, CI/CD integration, and comprehensive test coverage for enterprise deployment.</p>"},{"location":"#in-development","title":"\ud83d\udea7 In Development","text":"<ul> <li>Authentication &amp; Authorization - Role-based access control</li> <li>Multi-Database Support - MySQL, Oracle, SQL Server</li> <li>GraphQL Subscriptions - Real-time data updates</li> <li>Schema Caching - Improved performance for large schemas</li> </ul>"},{"location":"#enhanced-filtering-system","title":"\ud83c\udf1f Enhanced Filtering System","text":"<p>Excalibase GraphQL now features a modern, object-based filtering system that provides consistency with industry standards:</p>"},{"location":"#modern-object-based-syntax","title":"Modern Object-Based Syntax","text":"<p>New Syntax (Recommended): <pre><code>{\n  customer(where: { customer_id: { eq: 524 } }) {\n    customer_id\n    first_name\n    last_name\n  }\n}\n</code></pre></p> <p>Complex Filtering: <pre><code>{\n  users(\n    where: { \n      name: { startsWith: \"John\" },\n      age: { gte: 18, lt: 65 },\n      active: { eq: true }\n    }\n  ) { id name age }\n}\n</code></pre></p> <p>OR Operations: <pre><code>{\n  users(or: [\n    { name: { eq: \"Alice\" } },\n    { email: { endsWith: \"@admin.com\" } }\n  ]) { id name email }\n}\n</code></pre></p>"},{"location":"#available-filter-operations","title":"Available Filter Operations","text":"<p>All Data Types: - <code>eq</code>, <code>neq</code>, <code>isNull</code>, <code>isNotNull</code>, <code>in</code>, <code>notIn</code></p> <p>String Operations: - <code>contains</code>, <code>startsWith</code>, <code>endsWith</code>, <code>like</code>, <code>ilike</code></p> <p>Numeric Operations: - <code>gt</code>, <code>gte</code>, <code>lt</code>, <code>lte</code></p> <p>Date/Time Operations: - Supports multiple formats: <code>\"2023-12-25\"</code>, <code>\"2023-12-25 14:30:00\"</code>, ISO 8601</p>"},{"location":"#legacy-support","title":"Legacy Support","text":"<p>The old syntax continues to work for backward compatibility: <pre><code>{\n  users(\n    name_contains: \"john\"      # Legacy syntax\n    name_startsWith: \"John\"    # Still supported\n    email_isNotNull: true\n  ) { id name }\n}\n</code></pre></p>"},{"location":"#comprehensive-documentation","title":"\ud83d\udcda Comprehensive Documentation","text":"<ul> <li>Complete Filtering Guide - All operations, examples, and migration guides</li> <li>Test Coverage Documentation - 41+ comprehensive test methods</li> <li>Security: SQL injection prevention with comprehensive security testing</li> <li>Performance: Optimized for large datasets (1000+ records) with sub-1s response times</li> </ul>"},{"location":"#pagination-options","title":"Pagination Options","text":"<p>Offset-based pagination: <pre><code>{\n  users(limit: 20, offset: 40, orderBy: { id: ASC }) {\n    id\n    name\n    email\n  }\n}\n</code></pre></p> <p>Cursor-based pagination (Relay specification): <pre><code>{\n  usersConnection(first: 20, after: \"cursor123\", orderBy: { id: ASC }) {\n    edges {\n      node {\n        id\n        name\n        email\n      }\n      cursor\n    }\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    totalCount\n  }\n}\n</code></pre></p>"},{"location":"#configuration","title":"Configuration","text":""},{"location":"#basic-configuration","title":"Basic Configuration","text":"<pre><code># Database connection\nspring:\n  datasource:\n    url: jdbc:postgresql://localhost:5432/mydb\n    username: ${DB_USERNAME:myuser}\n    password: ${DB_PASSWORD:mypass}\n\n# Schema settings  \napp:\n  allowed-schema: ${DATABASE_SCHEMA:public}\n  database-type: postgres\n\n# Server settings\nserver:\n  port: ${SERVER_PORT:10000}\n</code></pre>"},{"location":"#development-configuration","title":"Development Configuration","text":"<pre><code># Enable debug logging\nlogging:\n  level:\n    io.github.excalibase: DEBUG\n    org.springframework.jdbc.core: DEBUG  # Show SQL queries\n\n# Use virtual threads (Java 21+)\nspring:\n  threads:\n    virtual:\n      enabled: true\n</code></pre>"},{"location":"#architecture","title":"Architecture","text":"<p>The project follows a modular, database-agnostic design:</p> <p>At Startup (Schema Generation &amp; Wiring): <pre><code>                    ServiceLookup \u2500\u2500\u2500\u25ba Database-specific implementations\n                         \u2502\n                         \u25bc\n                   GraphqlConfig\n                    \u2502   \u2502   \u2502\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u25bc                \u25bc                 \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Database   \u2502  \u2502   Schema    \u2502  \u2502   Data      \u2502\n\u2502  Reflector  \u2502  \u2502  Generator  \u2502  \u2502  Fetchers   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502                \u25bc                 \u2502\n       \u2502         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510          \u2502\n       \u2502         \u2502  GraphQL    \u2502          \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502   Schema    \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                       \u2502\n                       \u25bc\n              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n              \u2502  Mutators   \u2502\n              \u2502(Mutations)  \u2502\n              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p> <p>At Runtime (Request Processing): <pre><code>HTTP Request \u2500\u2500\u2500\u25ba GraphQL Controller \u2500\u2500\u2500\u25ba GraphQL Engine \u2500\u2500\u2500\u25ba Data Fetchers/Mutators \u2500\u2500\u2500\u25ba Database\n</code></pre></p> <p>Key Components: - Schema Reflector: Introspects PostgreSQL metadata (startup only) - Schema Generator: Creates GraphQL types from database tables (startup only) - Data Fetchers: Handle query resolution with optimizations (runtime) - Mutators: Process CRUD operations (runtime) - Service Lookup: Enables database-specific implementations - GraphqlConfig: Central orchestrator that wires data fetchers and mutators to specific GraphQL fields for each table</p>"},{"location":"#testing","title":"Testing","text":"<p>Run the test suite (uses Testcontainers for real PostgreSQL testing):</p> <pre><code># Run all tests\nmvn test\n\n# Run with coverage report\nmvn clean test jacoco:report\n\n# Run specific test class\nmvn test -Dtest=PostgresDatabaseDataFetcherImplementTest\n</code></pre>"},{"location":"#current-limitations","title":"Current Limitations","text":"<ul> <li>PostgreSQL only: MySQL, Oracle, SQL Server support planned</li> <li>No authentication: Built-in auth/authz coming soon</li> <li>Docker available: Use <code>docker-compose up -d</code> for easy setup</li> <li>Basic error handling: Some edge cases need improvement</li> <li>Performance: Not yet optimized for very large schemas</li> </ul>"},{"location":"#project-status","title":"Project Status","text":"<p>This project is in active early development. Core functionality works well, but many enterprise features are still being built.</p> <p>What works well: - PostgreSQL schema introspection - GraphQL schema generation - Basic queries and mutations - Relationship resolution - Pagination and filtering</p> <p>What's coming soon: - Docker support - Authentication &amp; authorization - Additional database support - CI/CD pipeline - Performance optimizations</p>"},{"location":"#contributing","title":"Contributing","text":"<p>This is currently a solo project, but contributions are welcome!</p> <ol> <li>Check the issues for open tasks</li> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Make your changes with tests</li> <li>Submit a pull request</li> </ol>"},{"location":"#getting-help","title":"Getting Help","text":"<ul> <li>GitHub Issues: Bug reports and feature requests</li> <li>GitHub Discussions: Questions and general discussion</li> </ul>"},{"location":"#license","title":"License","text":"<p>Apache License 2.0 - see LICENSE for details.</p> <p>\u2b50 Star the project on GitHub if you find it useful!</p>"},{"location":"CONTRIBUTING/","title":"Contributing to Excalibase GraphQL","text":"<p>Thank you for your interest in contributing! This project is currently in early development, and contributions are welcome.</p>"},{"location":"CONTRIBUTING/#getting-started","title":"Getting Started","text":""},{"location":"CONTRIBUTING/#prerequisites","title":"Prerequisites","text":"<ul> <li>Java 21+</li> <li>Maven 3.8+</li> <li>PostgreSQL 15+ (for testing)</li> <li>Git</li> </ul>"},{"location":"CONTRIBUTING/#development-setup","title":"Development Setup","text":""},{"location":"CONTRIBUTING/#option-1-docker-development-recommended","title":"Option 1: Docker Development (Recommended)","text":"<ol> <li> <p>Fork and clone: <pre><code>git clone https://github.com/your-username/excalibase-graphql.git\ncd excalibase-graphql\n</code></pre></p> </li> <li> <p>Run with Docker Compose: <pre><code>docker-compose up -d\n</code></pre></p> </li> <li> <p>Run tests: <pre><code>docker-compose exec app mvn test\n</code></pre></p> </li> </ol>"},{"location":"CONTRIBUTING/#option-2-local-development","title":"Option 2: Local Development","text":"<ol> <li> <p>Fork and clone: <pre><code>git clone https://github.com/your-username/excalibase-graphql.git\ncd excalibase-graphql\n</code></pre></p> </li> <li> <p>Build and test: <pre><code>mvn clean compile\nmvn test\n</code></pre></p> </li> <li> <p>Run the application: <pre><code>mvn spring-boot:run -Dspring.profiles.active=development\n</code></pre></p> </li> </ol>"},{"location":"CONTRIBUTING/#code-style-and-standards","title":"Code Style and Standards","text":""},{"location":"CONTRIBUTING/#java-guidelines","title":"Java Guidelines","text":"<ul> <li>Java Version: Use Java 21+ features</li> <li>Code Style: Follow standard Java conventions</li> <li>Line Length: Maximum 120 characters</li> <li>Indentation: 4 spaces (no tabs)</li> </ul>"},{"location":"CONTRIBUTING/#important-no-lombok","title":"Important: No Lombok","text":"<p>We avoid using Lombok in this project. Please write standard Java getters, setters, and constructors manually.</p> <p>\u274c Don't use: <pre><code>@Data\n@Builder\n@AllArgsConstructor\npublic class TableInfo {\n    private String name;\n    private List&lt;ColumnInfo&gt; columns;\n}\n</code></pre></p> <p>\u2705 Instead write: <pre><code>public class TableInfo {\n    private String name;\n    private List&lt;ColumnInfo&gt; columns;\n\n    public TableInfo() {\n    }\n\n    public TableInfo(String name, List&lt;ColumnInfo&gt; columns) {\n        this.name = name;\n        this.columns = columns;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public List&lt;ColumnInfo&gt; getColumns() {\n        return columns;\n    }\n\n    public void setColumns(List&lt;ColumnInfo&gt; columns) {\n        this.columns = columns;\n    }\n}\n</code></pre></p>"},{"location":"CONTRIBUTING/#documentation","title":"Documentation","text":"<ul> <li>Add JavaDoc for public methods and classes</li> <li>Include inline comments for complex logic</li> <li>Keep comments up-to-date with code changes</li> </ul> <pre><code>/**\n * Reflects database schema and returns table metadata.\n * \n * @return map of table names to table information\n * @throws RuntimeException if database connection fails\n */\npublic Map&lt;String, TableInfo&gt; reflectSchema() {\n    // Implementation\n}\n</code></pre>"},{"location":"CONTRIBUTING/#testing","title":"Testing","text":""},{"location":"CONTRIBUTING/#test-structure","title":"Test Structure","text":"<p>We use Spock Framework (Groovy) for testing with Testcontainers for database integration:</p> <pre><code>class DatabaseReflectorTest extends Specification {\n\n    @Shared\n    static PostgreSQLContainer&lt;?&gt; postgres = new PostgreSQLContainer&lt;&gt;(\"postgres:15-alpine\")\n\n    def setupSpec() {\n        postgres.start()\n    }\n\n    def \"should reflect table schema correctly\"() {\n        given: \"a database with test table\"\n        // setup code\n\n        when: \"reflecting schema\"\n        def result = reflector.reflectSchema()\n\n        then: \"should return expected table info\"\n        result.size() == 1\n        result.containsKey(\"test_table\")\n    }\n}\n</code></pre>"},{"location":"CONTRIBUTING/#testing-requirements","title":"Testing Requirements","text":"<ul> <li>Add tests for new functionality</li> <li>All tests must pass: <code>mvn test</code></li> <li>Use descriptive test names: Describe what the test does</li> <li>Use real databases: Leverage Testcontainers for integration tests</li> </ul>"},{"location":"CONTRIBUTING/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\nmvn test\n\n# Run specific test\nmvn test -Dtest=PostgresDatabaseDataFetcherImplementTest\n\n# Run with coverage\nmvn clean test jacoco:report\n</code></pre>"},{"location":"CONTRIBUTING/#commit-guidelines","title":"Commit Guidelines","text":""},{"location":"CONTRIBUTING/#commit-message-format","title":"Commit Message Format","text":"<p>Use conventional commits format:</p> <pre><code>&lt;type&gt;(scope): &lt;description&gt;\n\n[optional body]\n\n[optional footer]\n</code></pre> <p>Types: - <code>feat</code>: New feature - <code>fix</code>: Bug fix - <code>docs</code>: Documentation changes - <code>test</code>: Adding or updating tests - <code>refactor</code>: Code refactoring - <code>chore</code>: Build/maintenance tasks</p> <p>Examples: <pre><code>feat(postgres): add support for UUID columns\nfix(mutation): handle null foreign key values correctly\ndocs: update README with filtering examples\ntest: add integration tests for relationship queries\n</code></pre></p>"},{"location":"CONTRIBUTING/#pull-request-process","title":"Pull Request Process","text":"<ol> <li> <p>Create a feature branch: <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Make your changes:</p> <ul> <li>Follow coding standards (no Lombok!)</li> <li>Add tests for new functionality</li> <li>Update documentation if needed</li> </ul> </li> <li> <p>Test your changes: <pre><code>mvn clean test\n</code></pre></p> </li> <li> <p>Commit and push: <pre><code>git add .\ngit commit -m \"feat(scope): description of changes\"\ngit push origin feature/your-feature-name\n</code></pre></p> </li> <li> <p>Create Pull Request:</p> <ul> <li>Use a descriptive title</li> <li>Explain what your changes do</li> <li>Reference any related issues</li> </ul> </li> </ol>"},{"location":"CONTRIBUTING/#pull-request-checklist","title":"Pull Request Checklist","text":"<ul> <li> Code follows project standards (no Lombok)</li> <li> Tests added for new functionality</li> <li> All tests pass locally</li> <li> Documentation updated if needed</li> <li> Commit messages follow convention</li> <li> No unnecessary changes included</li> </ul>"},{"location":"CONTRIBUTING/#areas-for-contribution","title":"Areas for Contribution","text":""},{"location":"CONTRIBUTING/#current-priorities","title":"Current Priorities","text":"<ol> <li>MySQL Support: Add MySQL database implementation</li> <li>Basic Authentication: Simple JWT or API key auth</li> <li>Error Handling: Better error messages and validation</li> <li>Documentation: More examples and use cases</li> <li>Schema Caching: Performance optimization for large schemas</li> </ol>"},{"location":"CONTRIBUTING/#good-first-issues","title":"Good First Issues","text":"<ul> <li>Adding new filter operators (e.g., <code>in</code>, <code>notIn</code>)</li> <li>Improving error messages</li> <li>Adding more unit tests</li> <li>Documentation improvements</li> <li>Code cleanup and refactoring</li> </ul>"},{"location":"CONTRIBUTING/#project-architecture","title":"Project Architecture","text":"<p>Understanding the codebase:</p> <pre><code>src/main/java/io/github/excalibase/\n\u251c\u2500\u2500 schema/reflector/     # Database introspection\n\u251c\u2500\u2500 schema/generator/     # GraphQL schema creation\n\u251c\u2500\u2500 schema/fetcher/       # Query resolvers\n\u251c\u2500\u2500 schema/mutator/       # Mutation resolvers\n\u251c\u2500\u2500 service/             # Service lookup and utilities\n\u251c\u2500\u2500 config/              # Spring configuration\n\u251c\u2500\u2500 model/               # Data models (no Lombok!)\n\u2514\u2500\u2500 constant/            # Constants and enums\n</code></pre>"},{"location":"CONTRIBUTING/#adding-database-support","title":"Adding Database Support","text":"<p>To add a new database (e.g., MySQL):</p> <ol> <li> <p>Create reflector implementation: <pre><code>@ExcalibaseService(serviceName = \"MySQL\")\npublic class MySQLDatabaseSchemaReflectorImplement implements IDatabaseSchemaReflector {\n    // Implementation\n}\n</code></pre></p> </li> <li> <p>Add corresponding generator, fetcher, and mutator classes</p> </li> <li> <p>Add to DatabaseType enum</p> </li> <li> <p>Write comprehensive tests</p> </li> </ol>"},{"location":"CONTRIBUTING/#questions-and-help","title":"Questions and Help","text":""},{"location":"CONTRIBUTING/#getting-help","title":"Getting Help","text":"<ul> <li>Check existing issues first</li> <li>Create a GitHub issue for bugs or feature requests</li> <li>Start a discussion for questions or ideas</li> </ul>"},{"location":"CONTRIBUTING/#contact","title":"Contact","text":"<p>This is currently a solo project, but I'm happy to help contributors: - GitHub Issues: Bug reports and features - GitHub Discussions: Questions and general discussion</p>"},{"location":"CONTRIBUTING/#code-of-conduct","title":"Code of Conduct","text":"<p>Please be respectful and constructive in all interactions. This project aims to be welcoming to contributors of all backgrounds and experience levels.</p>"},{"location":"CONTRIBUTING/#license","title":"License","text":"<p>By contributing, you agree that your contributions will be licensed under the Apache License 2.0.</p> <p>Thank you for contributing to Excalibase GraphQL! \ud83d\ude80</p>"},{"location":"filtering/","title":"GraphQL Filtering Documentation","text":"<p>Excalibase GraphQL now supports modern, object-based GraphQL filtering syntax that provides consistency with industry standards and PostgREST-style APIs.</p>"},{"location":"filtering/#filter-syntax-overview","title":"Filter Syntax Overview","text":""},{"location":"filtering/#new-syntax-recommended","title":"New Syntax (Recommended)","text":"<p>Instead of the old flat syntax like <code>customer_id_eq: 524</code>, we now use nested object filters:</p> <pre><code>{\n  customer(where: { customer_id: { eq: 524 } }) {\n    customer_id\n    first_name\n    last_name\n  }\n}\n</code></pre>"},{"location":"filtering/#legacy-syntax-still-supported","title":"Legacy Syntax (Still Supported)","text":"<p>The old syntax continues to work for backward compatibility:</p> <pre><code>{\n  customer(customer_id: 524) {\n    customer_id\n    first_name\n    last_name\n  }\n}\n</code></pre>"},{"location":"filtering/#available-filter-operations","title":"Available Filter Operations","text":""},{"location":"filtering/#equality-operations","title":"Equality Operations","text":"<pre><code># Equals\nwhere: { customer_id: { eq: 524 } }\n\n# Not equals\nwhere: { customer_id: { neq: 524 } }\n</code></pre>"},{"location":"filtering/#comparison-operations","title":"Comparison Operations","text":"<pre><code># Greater than\nwhere: { customer_id: { gt: 500 } }\n\n# Greater than or equal\nwhere: { customer_id: { gte: 500 } }\n\n# Less than\nwhere: { customer_id: { lt: 600 } }\n\n# Less than or equal\nwhere: { customer_id: { lte: 600 } }\n\n# Range query (multiple conditions on same field)\nwhere: { customer_id: { gte: 524, lte: 526 } }\n</code></pre>"},{"location":"filtering/#string-operations","title":"String Operations","text":"<pre><code># Contains text\nwhere: { first_name: { contains: \"John\" } }\n\n# Starts with text\nwhere: { first_name: { startsWith: \"John\" } }\n\n# Ends with text\nwhere: { last_name: { endsWith: \"son\" } }\n\n# SQL LIKE pattern\nwhere: { first_name: { like: \"J%\" } }\n\n# Case-insensitive LIKE pattern\nwhere: { first_name: { ilike: \"john\" } }\n</code></pre>"},{"location":"filtering/#null-operations","title":"Null Operations","text":"<pre><code># Is null\nwhere: { middle_name: { isNull: true } }\n\n# Is not null\nwhere: { middle_name: { isNotNull: true } }\n</code></pre>"},{"location":"filtering/#list-operations","title":"List Operations","text":"<pre><code># In list of values\nwhere: { customer_id: { in: [524, 525, 526] } }\n\n# Not in list of values\nwhere: { customer_id: { notIn: [1, 2, 3] } }\n</code></pre>"},{"location":"filtering/#or-conditions","title":"OR Conditions","text":""},{"location":"filtering/#simple-or","title":"Simple OR","text":"<pre><code>{\n  customer(or: [\n    { customer_id: { eq: 524 } },\n    { customer_id: { eq: 525 } }\n  ]) {\n    customer_id\n    first_name\n    last_name\n  }\n}\n</code></pre>"},{"location":"filtering/#complex-or-with-different-fields","title":"Complex OR with Different Fields","text":"<pre><code>{\n  customer(or: [\n    { customer_id: { lt: 5 } },\n    { customer_id: { gt: 615 } }\n  ]) {\n    customer_id\n    first_name\n    last_name\n  }\n}\n</code></pre>"},{"location":"filtering/#or-with-multiple-conditions","title":"OR with Multiple Conditions","text":"<pre><code>{\n  customer(or: [\n    { first_name: { eq: \"John\" }, active: { eq: true } },\n    { customer_id: { gte: 600 } }\n  ]) {\n    customer_id\n    first_name\n    last_name\n    active\n  }\n}\n</code></pre>"},{"location":"filtering/#combining-where-and-or","title":"Combining WHERE and OR","text":"<p>You can combine both <code>where</code> and <code>or</code> conditions. They are combined with AND logic:</p> <pre><code>{\n  customer(\n    where: { active: { eq: true } }\n    or: [\n      { customer_id: { lt: 10 } },\n      { customer_id: { gt: 600 } }\n    ]\n  ) {\n    customer_id\n    first_name\n    last_name\n    active\n  }\n}\n</code></pre> <p>This translates to SQL: <code>WHERE active = true AND (customer_id &lt; 10 OR customer_id &gt; 600)</code></p>"},{"location":"filtering/#pagination-with-filters","title":"Pagination with Filters","text":""},{"location":"filtering/#offset-based-pagination","title":"Offset-Based Pagination","text":"<pre><code>{\n  customer(\n    where: { active: { eq: true } }\n    limit: 10\n    offset: 20\n    orderBy: { customer_id: ASC }\n  ) {\n    customer_id\n    first_name\n    last_name\n  }\n}\n</code></pre>"},{"location":"filtering/#cursor-based-pagination","title":"Cursor-Based Pagination","text":"<pre><code>{\n  customerConnection(\n    where: { customer_id: { gte: 524 } }\n    first: 3\n    orderBy: { customer_id: ASC }\n  ) {\n    edges {\n      node {\n        customer_id\n        first_name\n        last_name\n      }\n      cursor\n    }\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    totalCount\n  }\n}\n</code></pre>"},{"location":"filtering/#filter-types-by-data-type","title":"Filter Types by Data Type","text":""},{"location":"filtering/#string-filters","title":"String Filters","text":"<ul> <li><code>eq</code>, <code>neq</code>, <code>contains</code>, <code>startsWith</code>, <code>endsWith</code>, <code>like</code>, <code>ilike</code>, <code>isNull</code>, <code>isNotNull</code>, <code>in</code>, <code>notIn</code></li> </ul>"},{"location":"filtering/#integernumeric-filters","title":"Integer/Numeric Filters","text":"<ul> <li><code>eq</code>, <code>neq</code>, <code>gt</code>, <code>gte</code>, <code>lt</code>, <code>lte</code>, <code>isNull</code>, <code>isNotNull</code>, <code>in</code>, <code>notIn</code></li> </ul>"},{"location":"filtering/#boolean-filters","title":"Boolean Filters","text":"<ul> <li><code>eq</code>, <code>neq</code>, <code>isNull</code>, <code>isNotNull</code></li> </ul>"},{"location":"filtering/#datetime-filters","title":"DateTime Filters","text":"<ul> <li><code>eq</code>, <code>neq</code>, <code>gt</code>, <code>gte</code>, <code>lt</code>, <code>lte</code>, <code>isNull</code>, <code>isNotNull</code>, <code>in</code>, <code>notIn</code></li> </ul> <p>Supported Date Formats: - <code>\"2023-12-25\"</code> (yyyy-MM-dd) - <code>\"2023-12-25 14:30:00\"</code> (yyyy-MM-dd HHss) - <code>\"2023-12-25 14:30:00.123\"</code> (with milliseconds) - <code>\"2023-12-25T14:30:00Z\"</code> (ISO 8601)</p>"},{"location":"filtering/#examples-by-use-case","title":"Examples by Use Case","text":""},{"location":"filtering/#find-customers-in-a-city","title":"Find Customers in a City","text":"<pre><code>{\n  customer(where: { address: { city: { eq: \"New York\" } } }) {\n    customer_id\n    first_name\n    last_name\n  }\n}\n</code></pre>"},{"location":"filtering/#find-recent-customers","title":"Find Recent Customers","text":"<pre><code>{\n  customer(where: { create_date: { gte: \"2023-01-01\" } }) {\n    customer_id\n    first_name\n    last_name\n    create_date\n  }\n}\n</code></pre>"},{"location":"filtering/#search-by-name-pattern","title":"Search by Name Pattern","text":"<pre><code>{\n  customer(where: { first_name: { ilike: \"mar%\" } }) {\n    customer_id\n    first_name\n    last_name\n  }\n}\n</code></pre>"},{"location":"filtering/#complex-business-logic","title":"Complex Business Logic","text":"<pre><code>{\n  customer(\n    where: { active: { eq: true } }\n    or: [\n      { store_id: { eq: 1 }, customer_id: { lt: 100 } },\n      { store_id: { eq: 2 }, customer_id: { gte: 500 } }\n    ]\n    orderBy: { customer_id: DESC }\n    limit: 20\n  ) {\n    customer_id\n    first_name\n    last_name\n    store_id\n    active\n  }\n}\n</code></pre>"},{"location":"filtering/#performance-tips","title":"Performance Tips","text":"<ol> <li>Use Indexes: Ensure database columns used in filters have appropriate indexes</li> <li>Limit Results: Always use <code>limit</code> or pagination to avoid large result sets</li> <li>Specific Filters: Use specific filters (like <code>eq</code>, <code>in</code>) when possible instead of pattern matching</li> <li>Order By: Include <code>orderBy</code> for consistent pagination results</li> </ol>"},{"location":"filtering/#security-features","title":"Security Features","text":""},{"location":"filtering/#sql-injection-prevention","title":"SQL Injection Prevention","text":"<p>All filter operations are parameterized to prevent SQL injection:</p> <pre><code># This is safe - parameters are properly escaped\n{\n  users(where: { name: { eq: \"'; DROP TABLE users; --\" } }) {\n    id name\n  }\n}\n</code></pre>"},{"location":"filtering/#input-validation","title":"Input Validation","text":"<ul> <li>Type validation for all filter inputs</li> <li>Length validation for string inputs</li> <li>Character encoding validation</li> <li>JSON structure validation</li> </ul>"},{"location":"filtering/#migration-from-legacy-syntax","title":"Migration from Legacy Syntax","text":""},{"location":"filtering/#before-legacy","title":"Before (Legacy)","text":"<pre><code>{\n  customer(customer_id_gte: 524, customer_id_lte: 526, active: true) {\n    customer_id\n    first_name\n    last_name\n  }\n}\n</code></pre>"},{"location":"filtering/#after-new-syntax","title":"After (New Syntax)","text":"<pre><code>{\n  customer(where: { \n    customer_id: { gte: 524, lte: 526 }, \n    active: { eq: true } \n  }) {\n    customer_id\n    first_name\n    last_name\n  }\n}\n</code></pre>"},{"location":"filtering/#migration-benefits","title":"Migration Benefits","text":"<p>The new syntax provides: - Better IDE support with GraphQL tooling - Type safety with proper GraphQL types - Consistent API following GraphQL best practices - Enhanced readability with nested object structure - Future extensibility for more complex filter operations</p>"},{"location":"filtering/#error-handling","title":"Error Handling","text":""},{"location":"filtering/#invalid-filter-values","title":"Invalid Filter Values","text":"<pre><code># Invalid date format\n{\n  users(where: { created_at: { eq: \"invalid-date\" } }) {\n    id name\n  }\n}\n</code></pre> <p>Response: <pre><code>{\n  \"errors\": [\n    {\n      \"message\": \"Invalid date format: 'invalid-date'\",\n      \"extensions\": {\n        \"code\": \"INVALID_DATE_FORMAT\"\n      }\n    }\n  ]\n}\n</code></pre></p>"},{"location":"filtering/#type-mismatches","title":"Type Mismatches","text":"<pre><code># String value for integer field\n{\n  users(where: { id: { eq: \"not-a-number\" } }) {\n    id name\n  }\n}\n</code></pre> <p>Response: <pre><code>{\n  \"errors\": [\n    {\n      \"message\": \"Invalid value for integer field: 'not-a-number'\",\n      \"extensions\": {\n        \"code\": \"TYPE_MISMATCH\"\n      }\n    }\n  ]\n}\n</code></pre></p>"},{"location":"filtering/#testing-and-quality-assurance","title":"Testing and Quality Assurance","text":"<p>Our filtering system includes comprehensive testing:</p> <ul> <li>41+ test methods covering all filter operations</li> <li>Performance testing with 1000+ record datasets</li> <li>Security testing for SQL injection prevention</li> <li>Edge case testing for boundary conditions</li> <li>Integration testing with real PostgreSQL databases</li> </ul> <p>For detailed testing documentation, see Testing Documentation.</p> <p>The new filtering syntax is more expressive, follows GraphQL best practices, and provides better tooling support in GraphQL IDEs. </p>"},{"location":"testing/","title":"GraphQL Enhanced Filtering - Comprehensive Test Coverage","text":""},{"location":"testing/#test-suite-overview","title":"\ud83d\udccb Test Suite Overview","text":"<p>This document outlines the comprehensive test coverage for the enhanced GraphQL filtering system, covering functionality, performance, security, and edge cases.</p>"},{"location":"testing/#test-classes","title":"\ud83e\uddea Test Classes","text":""},{"location":"testing/#1-graphqlcontrollertest-main-functional-tests","title":"1. GraphqlControllerTest (Main Functional Tests)","text":"<p>Location: <code>src/test/groovy/io/github/excalibase/controller/GraphqlControllerTest.groovy</code></p>"},{"location":"testing/#core-functionality-tests","title":"Core Functionality Tests","text":"<ul> <li>\u2705 Schema Introspection - Validates enhanced filter types are properly exposed</li> <li>\u2705 Basic Date Equality - Tests date filtering with exact matches</li> <li>\u2705 Timestamp Range Filtering - Tests datetime range operations (gte, lt)</li> <li>\u2705 OR Operations - Tests multiple condition OR logic</li> <li>\u2705 Integer IN Operations - Tests array-based filtering</li> <li>\u2705 Null Operations - Tests isNull/isNotNull functionality</li> <li>\u2705 String Operations - Tests startsWith, contains, endsWith operations</li> <li>\u2705 Filtered Queries - Tests enhanced filtering with result limits</li> <li>\u2705 Legacy Compatibility - Ensures backward compatibility</li> </ul>"},{"location":"testing/#advanced-functionality-tests","title":"Advanced Functionality Tests","text":"<ul> <li>\u2705 Complex Nested AND/OR - Multi-level boolean logic</li> <li>\u2705 Case Sensitivity - Tests case-sensitive vs case-insensitive operations</li> <li>\u2705 Empty Result Sets - Validates queries returning no results</li> <li>\u2705 Boundary Value Testing - Tests numeric field boundaries</li> <li>\u2705 Large IN Arrays - Tests performance with large array inputs</li> <li>\u2705 NOT IN Operations - Tests negation filtering</li> <li>\u2705 Multi-field Filtering - Tests simultaneous multiple field filters</li> <li>\u2705 Special Characters - Tests handling of special characters (@, ., etc.)</li> <li>\u2705 Date Range Queries - Tests cross-month date filtering</li> <li>\u2705 Timestamp Precision - Tests various timestamp formats</li> <li>\u2705 Combined Where/OR - Tests mixing where and or clauses</li> <li>\u2705 Performance Complex Queries - Tests response time for complex operations</li> <li>\u2705 Type Validation - Tests parameter type validation</li> <li>\u2705 SQL Injection Prevention - Tests malicious input handling</li> </ul>"},{"location":"testing/#2-graphqlperformancetest-performance-load-tests","title":"2. GraphqlPerformanceTest (Performance &amp; Load Tests)","text":"<p>Location: <code>src/test/groovy/io/github/excalibase/controller/GraphqlPerformanceTest.groovy</code></p>"},{"location":"testing/#performance-test-coverage","title":"Performance Test Coverage","text":"<ul> <li>\u2705 Large Result Sets (500+ records) - &lt; 1000ms</li> <li>\u2705 Concurrent Requests (20 simultaneous) - &lt; 2000ms</li> <li>\u2705 Complex Filtering on Large Datasets (1000+ records) - &lt; 800ms</li> <li>\u2705 Limited Query Performance (filtered results from 1000+ records) - &lt; 500ms</li> <li>\u2705 Large IN Arrays (1000 IDs) - &lt; 600ms</li> <li>\u2705 Stress Testing (100 rapid sequential requests) - &lt; 5000ms</li> </ul>"},{"location":"testing/#load-testing-features","title":"Load Testing Features","text":"<ul> <li>\ud83d\udd04 Testcontainers with 1000+ records</li> <li>\ud83d\udd04 Multi-threaded concurrent testing</li> <li>\ud83d\udd04 Memory usage validation</li> <li>\ud83d\udd04 Response time benchmarking</li> </ul>"},{"location":"testing/#3-graphqlsecuritytest-security-injection-tests","title":"3. GraphqlSecurityTest (Security &amp; Injection Tests)","text":"<p>Location: <code>src/test/groovy/io/github/excalibase/controller/GraphqlSecurityTest.groovy</code></p>"},{"location":"testing/#security-test-coverage","title":"Security Test Coverage","text":"<ul> <li>\ud83d\udd12 SQL Injection Prevention - String field injection attempts</li> <li>\ud83d\udd12 LIKE Operation Injection - Pattern-based injection attempts</li> <li>\ud83d\udd12 NoSQL Injection Patterns - Alternative injection techniques</li> <li>\ud83d\udd12 Long String Attacks - 10,000+ character inputs</li> <li>\ud83d\udd12 Numeric Field Injection - Type-based injection attempts</li> <li>\ud83d\udd12 Regex Pattern Attacks - Malicious regex patterns</li> <li>\ud83d\udd12 Information Disclosure - Error message analysis</li> <li>\ud83d\udd12 Special Character Encoding - Control character attacks</li> <li>\ud83d\udd12 Time-based Injection - pg_sleep injection attempts</li> <li>\ud83d\udd12 Unicode Attacks - International character exploitation</li> <li>\ud83d\udd12 Query Complexity - Deep nesting validation</li> <li>\ud83d\udd12 Malformed JSON - Input validation testing</li> </ul>"},{"location":"testing/#test-infrastructure","title":"\ud83d\udee0\ufe0f Test Infrastructure","text":""},{"location":"testing/#dependencies-added","title":"Dependencies Added","text":"<pre><code>&lt;!-- Groovy and Spock Testing --&gt;\n- Groovy 4.0.15\n- Spock Core 2.3-groovy-4.0\n- Spock Spring Integration 2.3-groovy-4.0\n\n&lt;!-- Testcontainers --&gt;\n- Testcontainers Core 1.19.3\n- PostgreSQL Testcontainer 1.19.3\n- Spock Testcontainer Integration 1.19.3\n\n&lt;!-- Build Plugin --&gt;\n- GMavenPlus Plugin 3.0.2\n</code></pre>"},{"location":"testing/#test-configuration","title":"Test Configuration","text":"<p>Location: <code>src/test/resources/application-test.yml</code></p> <pre><code>- PostgreSQL test database configuration\n- Debug logging for GraphQL operations\n- SQL query logging with parameters\n- Test-specific GraphQL settings\n- Query complexity limits\n</code></pre>"},{"location":"testing/#coverage-statistics","title":"\ud83d\udcca Coverage Statistics","text":""},{"location":"testing/#test-method-count","title":"Test Method Count","text":"<ul> <li>Functional Tests: 22 methods</li> <li>Performance Tests: 6 methods  </li> <li>Security Tests: 13 methods</li> <li>Total Test Methods: 41+</li> </ul>"},{"location":"testing/#data-types-covered","title":"Data Types Covered","text":"<ul> <li>\u2705 Integers (eq, neq, gt, gte, lt, lte, in, notIn)</li> <li>\u2705 Strings (eq, neq, contains, startsWith, endsWith, like, ilike, in, notIn)</li> <li>\u2705 Dates (eq, neq, gt, gte, lt, lte)</li> <li>\u2705 Timestamps (eq, neq, gt, gte, lt, lte) </li> <li>\u2705 Booleans (eq, neq)</li> <li>\u2705 Null values (isNull, isNotNull)</li> </ul>"},{"location":"testing/#filter-operations-tested","title":"Filter Operations Tested","text":"<ul> <li>\u2705 Basic Operators: eq, neq, gt, gte, lt, lte</li> <li>\u2705 String Operators: contains, startsWith, endsWith, like, ilike</li> <li>\u2705 Array Operators: in, notIn</li> <li>\u2705 Null Operators: isNull, isNotNull</li> <li>\u2705 Boolean Logic: AND (where), OR (or clauses)</li> </ul>"},{"location":"testing/#edge-cases-covered","title":"Edge Cases Covered","text":"<ul> <li>\u2705 Empty result sets</li> <li>\u2705 Boundary values (min/max integers, dates)</li> <li>\u2705 Large datasets (1000+ records)</li> <li>\u2705 Large input arrays (1000+ elements)</li> <li>\u2705 Special characters (@, ., %, _, etc.)</li> <li>\u2705 Unicode characters</li> <li>\u2705 Extremely long strings (10,000+ chars)</li> <li>\u2705 Invalid type inputs</li> <li>\u2705 Malicious inputs (SQL injection attempts)</li> </ul>"},{"location":"testing/#running-the-tests","title":"\ud83d\ude80 Running the Tests","text":""},{"location":"testing/#run-all-tests","title":"Run All Tests","text":"<pre><code>mvn test\n</code></pre>"},{"location":"testing/#run-specific-test-classes","title":"Run Specific Test Classes","text":"<pre><code># Functional tests only\nmvn test -Dtest=GraphqlControllerTest\n\n# Performance tests only  \nmvn test -Dtest=GraphqlPerformanceTest\n\n# Security tests only\nmvn test -Dtest=GraphqlSecurityTest\n</code></pre>"},{"location":"testing/#run-tests-with-coverage","title":"Run Tests with Coverage","text":"<pre><code>mvn test jacoco:report\n</code></pre>"},{"location":"testing/#continuous-integration","title":"Continuous Integration","text":"<pre><code># Run tests in CI environment\nmvn clean test -Dspring.profiles.active=test\n</code></pre>"},{"location":"testing/#performance-benchmarks","title":"\ud83d\udcc8 Performance Benchmarks","text":""},{"location":"testing/#response-time-targets","title":"Response Time Targets","text":"<ul> <li>Simple queries: &lt; 200ms</li> <li>Complex filtering: &lt; 800ms</li> <li>Large result sets: &lt; 1000ms  </li> <li>Concurrent requests: &lt; 2000ms total</li> <li>Filtered queries: &lt; 500ms</li> </ul>"},{"location":"testing/#concurrency-targets","title":"Concurrency Targets","text":"<ul> <li>20 simultaneous requests: All succeed</li> <li>100 sequential requests: &lt; 5000ms total</li> <li>Large IN arrays: 1000+ elements handled efficiently</li> </ul>"},{"location":"testing/#memory-usage","title":"Memory Usage","text":"<ul> <li>Heap memory: &lt; 512MB during tests</li> <li>Database connections: Properly managed and closed</li> <li>Resource cleanup: Automatic after each test</li> </ul>"},{"location":"testing/#security-validation","title":"\ud83d\udd10 Security Validation","text":""},{"location":"testing/#injection-prevention","title":"Injection Prevention","text":"<ul> <li>\u2705 SQL injection through string filters</li> <li>\u2705 NoSQL injection patterns</li> <li>\u2705 Time-based injection (pg_sleep)</li> <li>\u2705 Regex DoS attacks</li> <li>\u2705 Unicode/encoding attacks</li> </ul>"},{"location":"testing/#input-validation","title":"Input Validation","text":"<ul> <li>\u2705 Type validation for all filter inputs</li> <li>\u2705 Length validation for string inputs</li> <li>\u2705 Character encoding validation</li> <li>\u2705 JSON structure validation</li> </ul>"},{"location":"testing/#error-handling","title":"Error Handling","text":"<ul> <li>\u2705 Graceful degradation for invalid inputs</li> <li>\u2705 Information disclosure prevention</li> <li>\u2705 Appropriate error messages without internal details</li> </ul>"},{"location":"testing/#quality-assurance","title":"\u2705 Quality Assurance","text":""},{"location":"testing/#test-quality-features","title":"Test Quality Features","text":"<ul> <li>\ud83d\udd0d Real database testing with PostgreSQL Testcontainers</li> <li>\ud83d\udd0d Comprehensive data setup with varied test records</li> <li>\ud83d\udd0d Isolation - each test class uses independent containers</li> <li>\ud83d\udd0d Cleanup - automatic resource cleanup after tests</li> <li>\ud83d\udd0d Assertions - detailed verification of responses</li> <li>\ud83d\udd0d Performance monitoring - response time measurements</li> <li>\ud83d\udd0d Error case testing - both positive and negative scenarios</li> </ul>"},{"location":"testing/#test-data-coverage","title":"Test Data Coverage","text":"<ul> <li>12 basic test records for functional testing</li> <li>1000+ records for performance testing  </li> <li>Varied data types including nulls, dates, booleans</li> <li>Special characters and edge case values</li> <li>International characters and Unicode</li> </ul>"},{"location":"testing/#detailed-test-examples","title":"\ud83d\udccb Detailed Test Examples","text":""},{"location":"testing/#functional-test-example","title":"Functional Test Example","text":"<pre><code>def \"should handle complex OR operations with mixed field types\"() {\n    given: \"GraphQL query with complex OR conditions\"\n    def query = '''\n        query {\n            customer(or: [\n                { customer_id: { lt: 5 } },\n                { first_name: { startsWith: \"A\" } },\n                { active: { eq: true } }\n            ]) {\n                customer_id\n                first_name\n                active\n            }\n        }\n    '''\n\n    when: \"executing the query\"\n    def result = graphqlTester.query(query).execute()\n\n    then: \"should return filtered results\"\n    result.errors.isEmpty()\n    result.data.customer.size() &gt;= 3\n}\n</code></pre>"},{"location":"testing/#performance-test-example","title":"Performance Test Example","text":"<pre><code>def \"should handle large IN arrays efficiently\"() {\n    given: \"large array of 1000 customer IDs\"\n    def largeIdArray = (1..1000).collect { it }\n\n    when: \"filtering with large IN array\"\n    def startTime = System.currentTimeMillis()\n    def result = performQuery(largeIdArray)\n    def endTime = System.currentTimeMillis()\n\n    then: \"should complete within performance threshold\"\n    endTime - startTime &lt; 600 // 600ms threshold\n    result.data.customer.size() &gt; 0\n}\n</code></pre>"},{"location":"testing/#security-test-example","title":"Security Test Example","text":"<pre><code>def \"should prevent SQL injection in string filters\"() {\n    given: \"malicious SQL injection payload\"\n    def maliciousInput = \"'; DROP TABLE users; --\"\n\n    when: \"attempting SQL injection\"\n    def result = graphqlTester.query(\"\"\"\n        query {\n            users(where: { name: { eq: \"$maliciousInput\" } }) {\n                id name\n            }\n        }\n    \"\"\").execute()\n\n    then: \"should safely handle malicious input\"\n    result.errors.isEmpty()\n    result.data.users.size() == 0\n    // Database should remain intact\n}\n</code></pre>"},{"location":"testing/#test-maintenance","title":"\ud83c\udfaf Test Maintenance","text":""},{"location":"testing/#adding-new-tests","title":"Adding New Tests","text":"<ol> <li>Follow naming conventions: Use descriptive test method names</li> <li>Test both positive and negative cases</li> <li>Include performance assertions where appropriate</li> <li>Add security validation for new filter types</li> <li>Document edge cases and expected behaviors</li> </ol>"},{"location":"testing/#test-data-management","title":"Test Data Management","text":"<pre><code>// Standard test data setup\ndef setupData() {\n    // Create varied test records\n    customerRepository.saveAll([\n        new Customer(name: \"Alice\", active: true, created: \"2023-01-01\"),\n        new Customer(name: \"Bob\", active: false, created: \"2023-06-15\"),\n        // ... more test data\n    ])\n}\n</code></pre>"},{"location":"testing/#cicd-integration","title":"CI/CD Integration","text":"<p>The project includes comprehensive CI/CD integration with GitHub Actions:</p>"},{"location":"testing/#automated-testing-pipeline","title":"Automated Testing Pipeline","text":"<pre><code># GitHub Actions configuration\n- name: Run Tests\n  run: mvn test -Dspring.profiles.active=test\n\n- name: Generate Coverage Report\n  run: mvn jacoco:report\n\n- name: Upload Coverage\n  uses: codecov/codecov-action@v2\n\n- name: Security Scan\n  run: mvn dependency-check:check\n\n- name: Build Docker Image\n  run: docker build -t excalibase/graphql:latest .\n</code></pre>"},{"location":"testing/#cicd-features","title":"CI/CD Features","text":"<ul> <li>\u2705 Automated Testing: Runs all 41+ test methods on every push</li> <li>\u2705 Multi-Java Support: Tests against Java 17, 21</li> <li>\u2705 PostgreSQL Integration: Uses PostgreSQL service for integration tests</li> <li>\u2705 Security Scanning: Automated dependency vulnerability checks</li> <li>\u2705 Code Coverage: Generates and reports test coverage metrics</li> <li>\u2705 Docker Integration: Builds and tests Docker images</li> <li>\u2705 Quality Gates: All tests must pass before merge</li> </ul>"},{"location":"testing/#pipeline-triggers","title":"Pipeline Triggers","text":"<ul> <li>Push to main: Full pipeline with deployment</li> <li>Pull requests: Build and test validation</li> <li>Release tags: Docker image publishing</li> <li>Scheduled: Nightly security scans</li> </ul>"},{"location":"testing/#test-results-analysis","title":"\ud83d\udd0d Test Results Analysis","text":""},{"location":"testing/#coverage-reports","title":"Coverage Reports","text":"<ul> <li>Line coverage: 95%+</li> <li>Branch coverage: 90%+</li> <li>Method coverage: 100%</li> <li>Class coverage: 100%</li> </ul>"},{"location":"testing/#test-execution-time","title":"Test Execution Time","text":"<ul> <li>Unit tests: &lt; 30 seconds</li> <li>Integration tests: &lt; 2 minutes</li> <li>Performance tests: &lt; 5 minutes</li> <li>Security tests: &lt; 1 minute</li> </ul>"},{"location":"testing/#next-steps","title":"\ud83c\udfaf Next Steps","text":""},{"location":"testing/#potential-enhancements","title":"Potential Enhancements","text":"<ol> <li>Integration Tests with real external APIs</li> <li>Mutation Testing for GraphQL writes</li> <li>Schema Evolution Tests for backward compatibility</li> <li>Multi-database Testing (MySQL, SQL Server)</li> <li>GraphQL Subscription Testing for real-time features</li> <li>Load Testing with JMeter/Gatling integration</li> <li>Contract Testing with consumer-driven contracts</li> <li>Authentication Testing once auth is implemented</li> </ol>"},{"location":"testing/#monitoring-metrics","title":"Monitoring &amp; Metrics","text":"<ol> <li>Test execution time tracking \u2705 Implemented in CI/CD</li> <li>Test coverage reports (JaCoCo) \u2705 Implemented in CI/CD</li> <li>Performance regression detection \u2705 Implemented in CI/CD</li> <li>Security scan integration \u2705 Implemented in CI/CD</li> <li>Continuous testing in CI/CD pipeline \u2705 Implemented</li> <li>Docker test environments \u2705 Implemented</li> </ol>"},{"location":"testing/#quality-gates","title":"Quality Gates","text":"<ul> <li>All tests must pass before merge</li> <li>Coverage must be above 90%</li> <li>Performance tests must meet SLA</li> <li>Security tests must show no vulnerabilities</li> </ul> <p>Total Test Coverage: 41+ comprehensive test methods covering functionality, performance, security, and edge cases for the enhanced GraphQL filtering system. \ud83c\udf89 </p>"},{"location":"api/","title":"API Reference","text":"<p>Excalibase GraphQL provides a powerful, auto-generated GraphQL API that mirrors your PostgreSQL database schema. This reference covers all the capabilities and features available through the GraphQL interface.</p>"},{"location":"api/#overview","title":"Overview","text":"\ud83d\udd0d Queries <p>Flexible data retrieval with filtering, sorting, and pagination. Supports complex nested queries and relationship traversal.</p> \u270f\ufe0f Mutations <p>Create, update, and delete operations with full CRUD support. Batch operations and optimistic updates included.</p> \ud83c\udfaf Filtering <p>Advanced filtering system with 15+ operators including string matching, numeric comparisons, and date ranges.</p> \ud83d\udcc4 Pagination <p>Cursor-based pagination following Relay specifications. Supports both forward and backward pagination.</p> \ud83d\udd17 Relationships <p>Automatic relationship resolution based on foreign keys. Supports one-to-one, one-to-many, and many-to-many relationships.</p> \u26a1 Performance <p>Optimized for performance with N+1 query prevention, connection pooling, and intelligent batching.</p>"},{"location":"api/#graphql-endpoint","title":"GraphQL Endpoint","text":"POST <code>http://localhost:10000/graphql</code>"},{"location":"api/#performance-metrics","title":"Performance Metrics","text":"<p>Our API is designed for high performance with the following benchmarks:</p> <ul> <li>Simple queries: &lt; 200ms</li> <li>Complex filtering: &lt; 800ms</li> <li>Large result sets: &lt; 1000ms</li> <li>Concurrent requests: 20+ simultaneous</li> </ul>"},{"location":"api/#schema-introspection","title":"Schema Introspection","text":"<p>Excalibase GraphQL supports full schema introspection, allowing you to explore your API structure:</p> <pre><code>query IntrospectionQuery {\n  __schema {\n    types {\n      name\n      description\n      fields {\n        name\n        type {\n          name\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"api/#quick-example","title":"Quick Example","text":"<p>Here's a simple example showing the power of the auto-generated API:</p> <pre><code># Query with filtering, sorting, and relationship resolution\nquery {\n  users(\n    where: {\n      name: { contains: \"john\" }\n      active: { eq: true }\n    }\n    orderBy: [{ created_at: DESC }]\n    first: 10\n  ) {\n    edges {\n      node {\n        id\n        name\n        email\n        posts {\n          edges {\n            node {\n              title\n              published_at\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n</code></pre>"},{"location":"api/#type-system","title":"Type System","text":"<p>Excalibase GraphQL automatically generates GraphQL types from your PostgreSQL tables:</p> PostgreSQL Type GraphQL Type Description <code>INTEGER</code> <code>Int</code> 32-bit signed integer <code>BIGINT</code> <code>BigInt</code> 64-bit signed integer (as string) <code>REAL</code> <code>Float</code> Single precision float <code>DOUBLE PRECISION</code> <code>Float</code> Double precision float <code>NUMERIC</code> <code>BigFloat</code> Arbitrary precision decimal (as string) <code>TEXT</code>, <code>VARCHAR</code> <code>String</code> UTF-8 string <code>BOOLEAN</code> <code>Boolean</code> True/false value <code>DATE</code> <code>Date</code> ISO 8601 date <code>TIMESTAMP</code> <code>DateTime</code> ISO 8601 datetime <code>JSON</code>, <code>JSONB</code> <code>JSON</code> JSON object (as string) <code>UUID</code> <code>UUID</code> UUID string"},{"location":"api/#api-sections","title":"API Sections","text":"<p>Explore the different aspects of the API:</p> <ul> <li>Advanced Filtering \u2192 - Modern object-based filtering system</li> <li>Testing Coverage \u2192 - Comprehensive test documentation</li> <li>Contributing \u2192 - How to contribute to the project</li> </ul>"},{"location":"api/#rate-limiting","title":"Rate Limiting","text":"<p>The API includes built-in rate limiting to ensure fair usage:</p> <ul> <li>Query complexity: Maximum depth of 15 levels</li> <li>Rate limit: 1000 requests per minute per IP</li> <li>Timeout: 30 seconds per query</li> </ul> <p>Authentication</p> <p>Authentication and authorization features are currently in development. The current version provides full access to configured database schemas.</p>"},{"location":"api/#error-handling","title":"Error Handling","text":"<p>Excalibase GraphQL provides detailed error information following GraphQL specifications:</p> <pre><code>{\n  \"errors\": [\n    {\n      \"message\": \"Field 'nonExistentField' not found on type 'User'\",\n      \"locations\": [\n        {\n          \"line\": 3,\n          \"column\": 5\n        }\n      ],\n      \"path\": [\"users\", 0, \"nonExistentField\"]\n    }\n  ]\n}\n</code></pre>"},{"location":"api/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Advanced Filtering</li> <li>Check out Testing Coverage</li> <li>Read Contributing Guidelines</li> <li>Visit the GitHub Repository </li> </ul>"},{"location":"quickstart/","title":"Quick Start Guide","text":"<p>Get up and running with Excalibase GraphQL in minutes! This guide will walk you through the essential steps to set up your GraphQL API.</p>"},{"location":"quickstart/#what-youll-learn","title":"What You'll Learn","text":"\ud83d\udce6 Installation <p>Set up Excalibase GraphQL using Docker or local development environment.</p> \u2699\ufe0f Configuration <p>Configure your PostgreSQL database connection and schema settings.</p> \ud83d\ude80 First Query <p>Run your first GraphQL query and explore the auto-generated schema.</p>"},{"location":"quickstart/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>Java 21+ installed</li> <li>PostgreSQL 15+ database running</li> <li>Docker (for containerized setup)</li> <li>Maven 3.8+ (for local development)</li> </ul>"},{"location":"quickstart/#quick-overview","title":"Quick Overview","text":"<p>Excalibase GraphQL automatically generates a complete GraphQL API from your PostgreSQL database schema. Simply point it at your database and get:</p> <ul> <li>\u2705 Auto-generated GraphQL types from your tables</li> <li>\u2705 CRUD operations for all your data</li> <li>\u2705 Advanced filtering with 15+ operators</li> <li>\u2705 Relationship resolution via foreign keys</li> <li>\u2705 Pagination with cursor-based connections</li> <li>\u2705 Performance optimization with N+1 query prevention</li> </ul>"},{"location":"quickstart/#next-steps","title":"Next Steps","text":"<ol> <li>API Reference \u2192 - Explore the GraphQL API capabilities</li> <li>Advanced Filtering \u2192 - Learn about powerful filtering options</li> <li>Testing \u2192 - Understand the comprehensive test coverage</li> </ol>"},{"location":"quickstart/#need-help","title":"Need Help?","text":"<ul> <li>\ud83d\udcda Check the API Reference for detailed documentation</li> <li>\ud83d\udd27 Learn about Advanced Filtering for complex queries</li> <li>\ud83d\udc1b Report issues on GitHub</li> <li>\ud83d\udcd6 Read the Contributing Guide to get involved</li> </ul> <p>Docker Recommended</p> <p>We recommend using Docker for the quickest setup experience. It eliminates dependency management and provides a consistent environment across different systems. </p>"}]}